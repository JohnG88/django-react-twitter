{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johna\\\\Documents\\\\django-twitter-react\\\\tweetme2\\\\tweetme2-web\\\\src\\\\tweets\\\\list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetList } from './lookup';\nimport { Tweet } from './detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TweetsList(props) {\n  _s();\n\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]); // useState is set to null because next url will eventually become null\n\n  const [nextUrl, setNextUrl] = useState(null);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        // console.log(response, status)\n        if (status === 200) {\n          setNextUrl(response.next);\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error!\");\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = event => {\n    event.preventDefault();\n\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {};\n\n      apitweetsList(props.username, () => {});\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [tweets.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Tweet, {\n        tweet: item,\n        didRetweet: handleDidRetweet,\n        className: \"col-12 col-md-10 mx-auto mb-4 tweet border rounded py-3\"\n      }, `${index}-{item.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this);\n    }), nextUrl !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-outline-primary\",\n      children: \"Load next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TweetsList, \"CK8DEMPf321wTX6TUPBPGOBv/bg=\");\n\n_c = TweetsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetsList\");","map":{"version":3,"sources":["C:/Users/johna/Documents/django-twitter-react/tweetme2/tweetme2-web/src/tweets/list.js"],"names":["React","useEffect","useState","apiTweetList","Tweet","TweetsList","props","tweetsInit","setTweetsInit","tweets","setTweets","nextUrl","setNextUrl","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","next","results","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","handleLoadNext","event","preventDefault","handleLoadNextResponse","apitweetsList","map","item","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    // useState is set to null because next url will eventually become null\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit);\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final);\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n    useEffect(() => {\r\n        if (tweetsDidSet === false) {\r\n            const handleTweetListLookup = (response, status) => {\r\n                // console.log(response, status)\r\n                if (status === 200) {\r\n                    setNextUrl(response.next)\r\n                    setTweetsInit(response.results);\r\n                    setTweetsDidSet(true);\r\n                } else {\r\n                    alert(\"There was an error!\");\r\n                }\r\n            };\r\n            apiTweetList(props.username, handleTweetListLookup);\r\n        }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetsInit= [...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n        const updateFinalTweets = [...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateFinalTweets)\r\n    }\r\n    const handleLoadNext = (event) => {\r\n        event.preventDefault()\r\n        if (nextUrl !== null) {\r\n            const handleLoadNextResponse = (response, status) => {\r\n\r\n            }\r\n            apitweetsList(props.username, () => {\r\n                \r\n            })\r\n        }\r\n    }\r\n    return <React.Fragment>\r\n        {tweets.map((item, index) => {\r\n            return (\r\n                <Tweet\r\n                    tweet={item}\r\n                    didRetweet={handleDidRetweet}\r\n                    key={`${index}-{item.id}`}\r\n                    className=\"col-12 col-md-10 mx-auto mb-4 tweet border rounded py-3\"\r\n                />\r\n            );\r\n        })}\r\n        {nextUrl !== null && <button className='btn btn-outline-primary'>Load next</button>}\r\n    </React.Fragment>\r\n}"]},"metadata":{},"sourceType":"module"}