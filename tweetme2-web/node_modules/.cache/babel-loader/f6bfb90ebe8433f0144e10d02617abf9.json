{"ast":null,"code":"function getCookie(name) {\n  let cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  } // New instance of class\n\n\n  const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\n\n  const url = `http://127.0.0.1:8000/api${endpoint}`;\n  xhr.responseType = 'json';\n  xhr.open(method, url);\n  const csrftoken = getCookie('csrftoken');\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  if (csrftoken) {\n    // xhr.setRequestHeader('HTTP_X_REQUESTED_WITH', 'XMLHttpRequest')\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('X-CSRFToken', csrftoken);\n  }\n\n  xhr.onload = function () {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail;\n\n      if (detail === 'Authentication credentials were not provided.') {\n        window.location.href = '/login?show';\n      }\n    }\n\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log('error', e);\n    callback({\n      message: \"The request was an error.\"\n    }, 400);\n  }; // console.log(jsonData);\n\n\n  xhr.send(jsonData);\n}","map":{"version":3,"sources":["C:/Users/johna/Documents/django-twitter-react/tweetme2/tweetme2-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","setRequestHeader","onload","status","detail","response","window","location","href","onerror","e","console","log","message","send"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,UAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AAED,OAAO,SAASU,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,IAAnD,EAAyD;AAC5D,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAU;AACNC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACH,GAJ2D,CAK5D;;;AACA,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CAN4D,CAM1B;;AAElC,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AAEAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAASX,MAAT,EAAiBS,GAAjB;AACA,QAAMG,SAAS,GAAGzB,SAAS,CAAC,WAAD,CAA3B;AACAoB,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AACA,MAAID,SAAJ,EAAe;AACX;AACAL,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC;AACAN,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,aAArB,EAAoCD,SAApC;AACH;;AACDL,EAAAA,GAAG,CAACO,MAAJ,GAAa,YAAY;AACrB,QAAIP,GAAG,CAACQ,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAMC,MAAM,GAAGT,GAAG,CAACU,QAAJ,CAAaD,MAA5B;;AACA,UAAIA,MAAM,KAAK,+CAAf,EAAgE;AAC5DE,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,aAAvB;AACH;AACJ;;AACDlB,IAAAA,QAAQ,CAACK,GAAG,CAACU,QAAL,EAAeV,GAAG,CAACQ,MAAnB,CAAR;AACH,GARD;;AASAR,EAAAA,GAAG,CAACc,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,CAArB;AACApB,IAAAA,QAAQ,CAAC;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAD,EAA2C,GAA3C,CAAR;AACH,GAHD,CA5B4D,CAgC5D;;;AACAlB,EAAAA,GAAG,CAACmB,IAAJ,CAAStB,QAAT;AACH","sourcesContent":["function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n    let jsonData;\r\n    if (data) {\r\n        jsonData = JSON.stringify(data)\r\n    }\r\n    // New instance of class\r\n    const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\r\n    \r\n    const url = `http://127.0.0.1:8000/api${endpoint}`;\r\n\r\n    xhr.responseType = 'json';\r\n    xhr.open(method, url);\r\n    const csrftoken = getCookie('csrftoken');\r\n    xhr.setRequestHeader('Content-Type', 'application/json')\r\n    if (csrftoken) {\r\n        // xhr.setRequestHeader('HTTP_X_REQUESTED_WITH', 'XMLHttpRequest')\r\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\r\n        xhr.setRequestHeader('X-CSRFToken', csrftoken)\r\n    }\r\n    xhr.onload = function () {\r\n        if (xhr.status === 403) {\r\n            const detail = xhr.response.detail\r\n            if (detail === 'Authentication credentials were not provided.') {\r\n                window.location.href = '/login?show'\r\n            }\r\n        }\r\n        callback(xhr.response, xhr.status);\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log('error', e);\r\n        callback({ message: \"The request was an error.\" }, 400);\r\n    };\r\n    // console.log(jsonData);\r\n    xhr.send(jsonData);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}