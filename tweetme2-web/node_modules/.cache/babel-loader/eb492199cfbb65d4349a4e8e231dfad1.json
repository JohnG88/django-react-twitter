{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johna\\\\Documents\\\\django-twitter-react\\\\tweetme2\\\\tweetme2-web\\\\src\\\\tweets\\\\components.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction loadTweets(callback) {\n  // New instance of class\n  const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\n\n  const method = \"GET\";\n  const url = \"http://127.0.0.1:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      message: \"The request was an error.\"\n    }, 400);\n  };\n\n  xhr.send();\n}\n\nexport function TweetsList(props) {\n  _s();\n\n  const [tweets, setTweets] = useState([{\n    content: 123\n  }]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      // console.log(response, status)\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error!\");\n      }\n    };\n\n    loadTweets(myCallback);\n  }, []);\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      className: \"col-12 col-md-10 mx-auto mb-4 tweet border rounded py-3\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  });\n}\n\n_s(TweetsList, \"VkhH8aE+s49hk7u2SrS8/E9PcHc=\");\n\n_c = TweetsList;\nexport function ActionBtn(props) {\n  const className = props.className ? props.className : \"btn btn-primary btn-sm\";\n  const {\n    tweet,\n    action\n  } = props;\n  return action.type === \"like\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    children: [\" \", tweet.likes, \" Like\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this) : null;\n}\n_c2 = ActionBtn;\nexport function Tweet(props) {\n  const {\n    tweet\n  } = props;\n  const className = props.className ? props.className : \"col-10 mx-auto col-md-6\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [tweet.id, \" - \", tweet.content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn btn-group\",\n        children: [/*#__PURE__*/_jsxDEV(ActionBtn, {\n          tweet: tweet,\n          action: {\n            type: \"like\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n          tweet: tweet,\n          action: {\n            type: \"unlike\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c3 = Tweet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TweetsList\");\n$RefreshReg$(_c2, \"ActionBtn\");\n$RefreshReg$(_c3, \"Tweet\");","map":{"version":3,"sources":["C:/Users/johna/Documents/django-twitter-react/tweetme2/tweetme2-web/src/tweets/components.js"],"names":["React","useEffect","useState","loadTweets","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","response","status","onerror","e","console","log","message","send","TweetsList","props","tweets","setTweets","content","myCallback","alert","map","item","index","ActionBtn","className","tweet","action","type","likes","Tweet","id"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction loadTweets(callback) {\r\n    // New instance of class\r\n    const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\r\n    const method = \"GET\";\r\n    const url = \"http://127.0.0.1:8000/api/tweets/\";\r\n    const responseType = \"json\";\r\n\r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status);\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log(e);\r\n        callback({ message: \"The request was an error.\" }, 400);\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweets, setTweets] = useState([{ content: 123 }]);\r\n    useEffect(() => {\r\n        const myCallback = (response, status) => {\r\n            // console.log(response, status)\r\n            if (status === 200) {\r\n                setTweets(response);\r\n            } else {\r\n                alert(\"There was an error!\");\r\n            }\r\n        };\r\n        loadTweets(myCallback);\r\n    }, []);\r\n    return tweets.map((item, index) => {\r\n        return (\r\n            <Tweet\r\n                tweet={item}\r\n                key={`${index}-{item.id}`}\r\n                className=\"col-12 col-md-10 mx-auto mb-4 tweet border rounded py-3\"\r\n            />\r\n        );\r\n    });\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const className = props.className\r\n        ? props.className\r\n        : \"btn btn-primary btn-sm\";\r\n    const { tweet, action } = props;\r\n    return action.type === \"like\" ? (\r\n        <button className={className}> {tweet.likes} Like</button>\r\n    ) : null;\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const { tweet } = props;\r\n    const className = props.className\r\n        ? props.className\r\n        : \"col-10 mx-auto col-md-6\";\r\n    return (\r\n        <>\r\n            <div className={className}>\r\n                <p>\r\n                    {tweet.id} - {tweet.content}\r\n                </p>\r\n                <div className=\"btn btn-group\">\r\n                    <ActionBtn tweet={tweet} action={{ type: \"like\" }} />\r\n                    <ActionBtn tweet={tweet} action={{ type: \"unlike\" }} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}