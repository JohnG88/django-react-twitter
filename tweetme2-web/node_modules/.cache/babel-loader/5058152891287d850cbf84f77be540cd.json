{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johna\\\\Documents\\\\django-twitter-react\\\\tweetme2\\\\tweetme2-web\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\"; // useEffect will help into looking http requests from backend\n// useState\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tweets, setTweets] = useState([{\n    content: 123\n  }]);\n\n  const loadTweets = function (tweetsElement) {\n    // New instance of class\n    const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\n\n    const method = \"GET\";\n    const url = \"/tweets\";\n    const responseType = \"json\";\n    xhr.responseType = responseType;\n    xhr.open(method, url);\n\n    xhr.onload = function () {\n      //console.log(xhr.response)\n      const serverResponse = xhr.response;\n      var listedItems = serverResponse; // array/list\n\n      var finalTweetStr = \"\";\n      var i;\n\n      for (i = 0; i < listedItems.length; i++) {\n        //console.log(i);\n        //console.log(listedItems[i]);\n        var tweetObj = listedItems[i];\n        var currentItem = formatTweetElement(tweetObj);\n        finalTweetStr += currentItem;\n      }\n\n      tweetsElement.innerHTML = finalTweetStr; //console.log(listedItems)\n    };\n\n    xhr.send();\n  };\n\n  useEffect(() => {\n    const tweetItems = [{\n      'content': 123\n    }, {\n      'content': 'hello world'\n    }];\n    setTweets(tweetItems);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 26\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tweets.map((tweet, index) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: tweet.content\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"DAbVbhM8ge1E7r29jHSTnfViy54=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/johna/Documents/django-twitter-react/tweetme2/tweetme2-web/src/App.js"],"names":["React","useEffect","useState","App","tweets","setTweets","content","loadTweets","tweetsElement","xhr","XMLHttpRequest","method","url","responseType","open","onload","serverResponse","response","listedItems","finalTweetStr","i","length","tweetObj","currentItem","formatTweetElement","innerHTML","send","tweetItems","logo","map","tweet","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAGA,OAAO,WAAP,C,CAEA;AACA;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAC;AAACI,IAAAA,OAAO,EAAE;AAAV,GAAD,CAAD,CAApC;;AAEA,QAAMC,UAAU,GAAG,UAASC,aAAT,EAAwB;AACzC;AACA,UAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CAFyC,CAEP;;AAClC,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,GAAG,GAAG,SAAZ;AACA,UAAMC,YAAY,GAAG,MAArB;AAEAJ,IAAAA,GAAG,CAACI,YAAJ,GAAmBA,YAAnB;AACAJ,IAAAA,GAAG,CAACK,IAAJ,CAASH,MAAT,EAAiBC,GAAjB;;AACAH,IAAAA,GAAG,CAACM,MAAJ,GAAa,YAAY;AACrB;AACA,YAAMC,cAAc,GAAGP,GAAG,CAACQ,QAA3B;AACA,UAAIC,WAAW,GAAGF,cAAlB,CAHqB,CAGa;;AAClC,UAAIG,aAAa,GAAG,EAApB;AACA,UAAIC,CAAJ;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,WAAW,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC;AACA;AACA,YAAIE,QAAQ,GAAGJ,WAAW,CAACE,CAAD,CAA1B;AACA,YAAIG,WAAW,GAAGC,kBAAkB,CAACF,QAAD,CAApC;AACAH,QAAAA,aAAa,IAAII,WAAjB;AACH;;AACDf,MAAAA,aAAa,CAACiB,SAAd,GAA0BN,aAA1B,CAbqB,CAcrB;AACH,KAfD;;AAgBAV,IAAAA,GAAG,CAACiB,IAAJ;AACH,GA1BC;;AA4BAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,UAAU,GAAG,CAAC;AAAC,iBAAW;AAAZ,KAAD,EAAmB;AAAC,iBAAW;AAAZ,KAAnB,CAAnB;AACAtB,IAAAA,SAAS,CAACsB,UAAD,CAAT;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,yCACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADT;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AAAA,kBACKxB,MAAM,CAACyB,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAiB;AACzB,8BAAO;AAAA,sBAAiBD,KAAK,CAACxB;AAAvB,aAASyB,KAAT;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cALJ,eAUI;AACI,QAAA,SAAS,EAAC,UADd;AAEI,QAAA,IAAI,EAAC,qBAFT;AAGI,QAAA,MAAM,EAAC,QAHX;AAII,QAAA,GAAG,EAAC,qBAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GA3DQ5B,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// useEffect will help into looking http requests from backend\n// useState\n\nfunction App() {\n    const [tweets, setTweets] = useState([{content: 123}]);\n\n    const loadTweets = function(tweetsElement) {\n      // New instance of class\n      const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\n      const method = \"GET\";\n      const url = \"/tweets\";\n      const responseType = \"json\";\n\n      xhr.responseType = responseType;\n      xhr.open(method, url);\n      xhr.onload = function () {\n          //console.log(xhr.response)\n          const serverResponse = xhr.response;\n          var listedItems = serverResponse; // array/list\n          var finalTweetStr = \"\";\n          var i;\n          for (i = 0; i < listedItems.length; i++) {\n              //console.log(i);\n              //console.log(listedItems[i]);\n              var tweetObj = listedItems[i]\n              var currentItem = formatTweetElement(tweetObj)\n              finalTweetStr += currentItem;\n          }\n          tweetsElement.innerHTML = finalTweetStr;\n          //console.log(listedItems)\n      };\n      xhr.send();\n  }\n\n    useEffect(() => {\n      const tweetItems = [{'content': 123}, {'content': 'hello world'}]\n      setTweets(tweetItems)\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <p>\n                    {tweets.map((tweet, index) =>{\n                        return <li key={index}>{tweet.content}</li>\n                    })}\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}