{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","message","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","tweetsEl","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c3798877.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { loadTweets } from \"../lookup\";\r\n\r\nexport function TweetsComponent(props) {\r\n    // createRef will allow to get value of textarea\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(event);\r\n        const newVal = textAreaRef.current.value;\r\n        let tempNewTweets = [...newTweets]\r\n        // push sends to end of array, unshift to top of array\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 12313\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        console.log(newVal);\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className=\"col-12 mb-3 \">\r\n                <form onSubmit={handleSubmit}>\r\n                    <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\">\r\n                        \r\n                    </textarea>\r\n                    <button type=\"submit\"className=\"btn btn-primary my-3\">Tweet</button>\r\n                </form>\r\n            </div>\r\n            <TweetsList newTweets={newTweets}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([])\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n        \r\n    },[props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n        const myCallback = (response, status) => {\r\n            // console.log(response, status)\r\n            if (status === 200) {\r\n                setTweetsInit(response);\r\n            } else {\r\n                alert(\"There was an error!\");\r\n            }\r\n        };\r\n        loadTweets(myCallback);\r\n    }, [tweetsInit]);\r\n    return tweets.map((item, index) => {\r\n        return (\r\n            <Tweet\r\n                tweet={item}\r\n                key={`${index}-{item.id}`}\r\n                className=\"col-12 col-md-10 mx-auto mb-4 tweet border rounded py-3\"\r\n            />\r\n        );\r\n    });\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const { tweet, action } = props;\r\n    // remember likes is variable and setLikes is to update variable\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false);\r\n    const className = props.className\r\n        ? props.className\r\n        : \"btn btn-primary btn-sm\";\r\n    // if action.display then show action.display else show 'Action'\r\n    const actionDisplay = action.display ? action.display : \"Action\";\r\n    // if action type = 'like' show tweet likes actionDisplay, else show actionDisplay\r\n    const display =\r\n        action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        if (action.type === \"like\") {\r\n            if (userLike === true) {\r\n                // perhaps unlike it?\r\n                setLikes(likes - 1);\r\n                setUserLike(false);\r\n            } else {\r\n                setLikes(likes + 1);\r\n                setUserLike(true);\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <button className={className} onClick={handleClick}>\r\n            {display}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const { tweet } = props;\r\n    const className = props.className\r\n        ? props.className\r\n        : \"col-10 mx-auto col-md-6\";\r\n    return (\r\n        <>\r\n            <div className={className}>\r\n                <p>\r\n                    {tweet.id} - {tweet.content}\r\n                </p>\r\n                <div className=\"btn btn-group\">\r\n                    <ActionBtn\r\n                        tweet={tweet}\r\n                        action={{ type: \"like\", display: \"Likes\" }}\r\n                    />\r\n                    <ActionBtn\r\n                        tweet={tweet}\r\n                        action={{ type: \"unlike\", display: \"Unlike\" }}\r\n                    />\r\n                    <ActionBtn\r\n                        tweet={tweet}\r\n                        action={{ type: \"retweet\", display: \"Retweet\" }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","export function loadTweets(callback) {\r\n    // New instance of class\r\n    const xhr = new XMLHttpRequest(); // like python, xhr = new SomeClass()\r\n    const method = \"GET\";\r\n    const url = \"http://127.0.0.1:8000/api/tweets/\";\r\n    const responseType = \"json\";\r\n\r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status);\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log(e);\r\n        callback({ message: \"The request was an error.\" }, 400);\r\n    };\r\n    xhr.send();\r\n}","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { TweetsComponent } from \"./tweets\";\n\n// useEffect will help into looking http requests from backend\n// useState\n\nfunction App() {\n    // function loadTweets is from index.html\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <div>\n                    <TweetsComponent/>\n                </div>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent } from \"./tweets\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>,\n//     document.getElementById(\"root\")\n// );\n\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n    ReactDOM.render(\n        <React.StrictMode>\n            <TweetsComponent />\n        </React.StrictMode>,\n        tweetsEl\n    );\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}